package youtube

import (
	"errors"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
)

const (
	// Specify the language subtitles are downloaded in
	// `youtube-dl --list` will produce the list of languages a video has
	// available subtitles for
	subLang string = "en"
)

type Settings struct {
	ytExe string
	ffmpegExe string
	dlPath string
}

func NewSettings(yt, ffmpeg, dl string) (Settings, error) {
	// Check if the youtube-dl binary exists
	if _, err := os.Stat(yt); os.IsNotExist(err) {
		return Settings{}, err
	}

	// Check if the ffmpeg binary exists
	if _, err := os.Stat(ffmpeg); os.IsNotExist(err) {
		return Settings{}, err
	}

	// Check if the download folder exists
	if _, err := os.Stat(dl); os.IsNotExist(err) {
		// folder doesn't exist so create it
		err = os.MkdirAll(dl, 0755)
		if err != nil {
			// return if there is an error creating the folder
			return Settings{}, err
		}
	}

	// Make the struct with the new values
	out := Settings {
		yt,
		ffmpeg,
		dl,
	}
	return out, nil
}

type Downloader struct {
	link string
	uuid string
	subs bool
	settings Settings
}

func NewDownloader(link, uuid string, subs bool, settings Settings) Downloader {
	// TODO: youtube link parse
	out := Downloader{
		link,
		uuid,
		subs,
		settings,
	}
	return out
}

// Returns title of video of the given link.
func (d *Downloader) Title() (string, error) {
	args := []string{"--get-title", "--no-playlist", d.link}
	dl := exec.Command(d.settings.ytExe, args...)
	output, err := dl.Output()
	title := strings.TrimSpace(string(output))
	return title, err
}

func (d *Downloader) Id() (string, error) {
	args := []string{"--get-id", "--no-playlist", d.link}
	dl := exec.Command(d.settings.ytExe, args...)
	output, err := dl.Output()
	id := strings.TrimSpace(string(output))
	return id, err
}

// Downloads video and returns filepath as string to downloaded video file.
func (d *Downloader) Filepath() (string, error) {
	// Use output template to download to folder and set filename as UUID
	outputPath := d.settings.dlPath + "/" + d.uuid + `.%(ext)s`

	// Apply output path and ffmpeg location
	args := []string{"-o", outputPath, "--no-playlist", "--ffmpeg-location", d.settings.ffmpegExe}

	// Download and embed (non-autogenerated) youtube subtitles into the video
	if d.subs {
		args = append(args, []string{"--write-sub", "--sub-lang", subLang, "--embed-sub"}...)
	}

	// Add link
	args = append(args, d.link)

	dl := exec.Command(d.settings.ytExe, args...)
	err := dl.Run()
	if err != nil {
		// Return if any errors in downloading video
		return "", err
	}

	// The file extension for the new video is unknown, so perform a search of
	// the filename using a wildcard for the extension, if any.
	res, _ := filepath.Glob(d.settings.dlPath + "/" + d.uuid +  "*")

	// No search results
	if len(res) < 1 {
		return "", errors.New("Cannot find downloaded video file: " + d.uuid)
	}

	// Return first search result
	return res[0], nil
}
